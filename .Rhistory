library(rgdal)
library(sf)
library(cluster)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
library(knitr)
source('fastClusterGVF.R') # custom goodness of fit measure
## load example data - Denver census tracts in 2012
den = readOGR(getwd(), 'denver12', verbose = F)
den = den[den$GEOID!='08031980100',] # remove unpopulated tract
head(den@data)
d
# Chunk 1: setup
library(rgdal)
library(sf)
library(cluster)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
library(knitr)
source('fastClusterGVF.R') # custom goodness of fit measure
## load example data - Denver census tracts in 2012
den = readOGR(getwd(), 'denver12', verbose = F)
den = den[den$GEOID!='08031980100',] # remove unpopulated tract
# Chunk 2
knitr::include_graphics('figs/singleton_spielman_ex.jpeg')
# Chunk 3
knitr::include_graphics('figs/ecoregions.png')
# Chunk 4
knitr::include_graphics('figs/02_transitions.png')
# Chunk 5
knitr::include_graphics('figs/03_processes.png')
# Chunk 6
## create data
set.seed(808)
a <- data.frame(rnorm(500, mean = 0.5, sd = 0.2) + 5,
rnorm(500) +5)
b <- data.frame(rnorm(500, mean = 0.2, sd = 0.3) + 1,
rnorm(500) +2)
c <- data.frame(rnorm(500, mean = 0.1, sd = 0.25) + 3,
rnorm(500) -3)
## draw groups
plot(a, xlim=c(-2, 9), ylim=c(-7,
9), pch=16, col=4,
xlab = 'Attribute A', ylab = 'Attribute B',
main = 'Clustering in a Perfect World')
points(b, col=2, pch=16)
points(c, col=3, pch=16)
# Chunk 7
knitr::include_graphics('figs/Kmeans_animation.gif')
# Chunk 8
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'Nghbrhd', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
## standardize (z-score) cluster inputs
clust_dat_z = scale(clust_dat)
## perform clustering
set.seed(909)
kmclust = kmeans(clust_dat_z, centers = 7)$cluster # perform k-means and extract group labels
# Chunk 9
## map the clusters in physical space
den_map = as(den,'sf')
den_map$kmeans_cluster = factor(kmclust)
plot(den_map['kmeans_cluster'],main = paste('Denver Tracts 2012: k-means with k=7 clusters'))
# Chunk 10
knitr::include_graphics('figs/dist_ex.png')
# Chunk 11
knitr::include_graphics('figs/WPGMA_Dendrogram_5S_data.svg')
# Chunk 12
## add neighborhood ids to rownames for readability
rownames(clust_dat_z) = den$Nghbrhd
## generate distance matrix
d = dist(clust_dat_z)
## ward dendrogram
dend = hclust(d = d, method = 'ward.D2')
# Chunk 13
## view the dendrogram
plot(dend)
# Chunk 14
## Specify a range of cluster numbers
krange = 3:10
# goodness of variance fit
gvf = sapply(krange, function(k){
kclust = cutree(dend, k)
fastClusterGVF(dat = clust_dat, clust = kclust)
})
# average silhouette width
sil = sapply(krange, function(k){
kclust = cutree(dend, k)
mean(silhouette(x = kclust, dist = d)[,3])
})
# Chunk 15
## output diagnostics
cl_diag = cbind(k = krange, gvf = gvf, sil = sil)
par(mfrow=c(1,2))
plot(gvf ~ k, data = cl_diag, type='l', main = 'Goodness of Variance Fit')
plot(sil ~ k, data = cl_diag, type='l', main = 'Average Silhouette Width')
# Chunk 16
kable(round(data.frame(cl_diag), 2))
# Chunk 17
## cut dendrogram at best k and assign it to our sf object
best_k = 7
den_map['cluster'] = factor(cutree(dend, best_k))
## plot the map
plot(den_map['cluster'],main = paste('Denver Tracts 2012: k =',best_k,'clusters'))
# Chunk 18
## re-plot map
plot(den_map['cluster'],main = paste('Denver Tracts 2012: k =',best_k,'clusters'))
# Chunk 19
## assign cluster labels to full data
den@data$cluster = factor(cutree(dend, best_k))
## sort clusters by median of outcome variable, highest to lowest
health_uninsured_by_cluster = with(den@data, aggregate(Hlth_Un ~ cluster, FUN = 'median'))
health_uninsured_by_cluster = health_uninsured_by_cluster[order(health_uninsured_by_cluster$Hlth_Un, decreasing = T),]
den$cluster = factor(den$cluster, levels = health_uninsured_by_cluster$cluster)
## plot outcome variable
cols = brewer.pal(best_k, 'Set2')[as.numeric(levels(den$cluster))]
with(den@data, plot(Hlth_Un ~ cluster, col = cols, main = 'Percent of Population without Health Insurance by Cluster', ylab = 'Percent Uninsured'))
abline(h = median(den$Hlth_Un), col = 'red')
# Chunk 20
## generate average profile of a cluster
den_cent = colMeans(clust_dat) # the data centroid
cl = levels(den$cluster)[1] # our target cluster
cl_cent = colMeans(clust_dat[den$cluster==cl,]) # the cluster centroid
avp = (cl_cent - den_cent) / den_cent # difference from data mean
## format the data for plotting
avp_melt = melt(avp)
var_order = rownames(avp_melt)[order(avp_melt$value, decreasing = T)] # plot vars greatest to smallest
avp_melt$variable = factor(rownames(avp_melt), levels = var_order)
cl_col = cols[which(levels(den$cluster) == cl)] # for coloring barplot
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
ggtitle(paste('Average Profile for Cluster',cl))
library(smacof)
sm <- smacofSym(d)
text(sm$conf, plot(sm$conf), labels = den$Nghbrhd)
dev.off()
text(sm$conf, plot(sm$conf), labels = den$Nghbrhd, cex = 0.5)
text(sm$conf, plot(sm$conf, cex = 0), labels = den$Nghbrhd, cex = 0.5)
text(sm$conf, plot(sm$conf, cex = 0), labels = den$Nghbrhd, cex = 0.5, col = den_map$cluster)
text(sm$conf, plot(sm$conf, cex = 0), labels = den$Nghbrhd, cex = 0.5, col = den_map['cluster'])
clust <- factor(cutree(dend, 7))
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = clust)
clust
clust <- as.character(cutree(dend, 7))
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = clust)
clust <- cutree(dend, 7)
library(RColorBrewer)
library(smacof)
sm <- smacofSym(d)
clust <- cutree(dend, 7)
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = brewer.pal(8, 'Set2')[clust])
names(den)
denx <- den@data[,c('GEOID', 'Nghbrhd')]
denx <- split(denx, denx$Nghbrhd)
set.seed(808)
clust.sm <- kmeans(sm$conf, centers = 7)
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = brewer.pal(8, 'Set2')[clust.sm])
clust.sm <- kmeans(sm$conf, centers = 7)$cluster
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = brewer.pal(8, 'Set2')[clust.sm])
den['clust.sm'] <- factor(clust.sm)
den
den_map['clust.sm'] <- factor(clust.sm)
plot(den_map['clust.sm'])
plot(den_map['clust.sm'], lwd = 0.1)
denx
for(i in 1:length(denx)){
denx[[i]]$Nghbrhd <- paste(denx[[i]]$Nghbrhd, toupper(letters[1:nrow(denx[[i]])]))
}
denx
denx <- do.call(rbind, denx)
den$Nghbrhd <- denx$Nghbrhd[match(den$GEOID, denx$GEOID)]
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = brewer.pal(8, 'Set2')[clust])
rm(list = ls())
# Chunk 1: setup
library(rgdal)
library(sf)
library(cluster)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
library(knitr)
source('fastClusterGVF.R') # custom goodness of fit measure
## load example data - Denver census tracts in 2012
den = readOGR(getwd(), 'denver12', verbose = F)
den = den[den$GEOID!='08031980100',] # remove unpopulated tract
# Chunk 2
knitr::include_graphics('figs/singleton_spielman_ex.jpeg')
# Chunk 3
knitr::include_graphics('figs/ecoregions.png')
# Chunk 4
knitr::include_graphics('figs/02_transitions.png')
# Chunk 5
knitr::include_graphics('figs/03_processes.png')
# Chunk 6
## create data
set.seed(808)
a <- data.frame(rnorm(500, mean = 0.5, sd = 0.2) + 5,
rnorm(500) +5)
b <- data.frame(rnorm(500, mean = 0.2, sd = 0.3) + 1,
rnorm(500) +2)
c <- data.frame(rnorm(500, mean = 0.1, sd = 0.25) + 3,
rnorm(500) -3)
## draw groups
plot(a, xlim=c(-2, 9), ylim=c(-7,
9), pch=16, col=4,
xlab = 'Attribute A', ylab = 'Attribute B',
main = 'Clustering in a Perfect World')
points(b, col=2, pch=16)
points(c, col=3, pch=16)
# Chunk 7
knitr::include_graphics('figs/Kmeans_animation.gif')
# Chunk 8
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'Nghbrhd', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
## standardize (z-score) cluster inputs
clust_dat_z = scale(clust_dat)
## perform clustering
set.seed(909)
kmclust = kmeans(clust_dat_z, centers = 7)$cluster # perform k-means and extract group labels
# Chunk 9
## map the clusters in physical space
den_map = as(den,'sf')
den_map$kmeans_cluster = factor(kmclust)
plot(den_map['kmeans_cluster'],main = paste('Denver Tracts 2012: k-means with k=7 clusters'))
# Chunk 10
knitr::include_graphics('figs/dist_ex.png')
# Chunk 11
knitr::include_graphics('figs/WPGMA_Dendrogram_5S_data.svg')
# Chunk 12
## add neighborhood ids to rownames for readability
rownames(clust_dat_z) = den$Nghbrhd
## generate distance matrix
d = dist(clust_dat_z)
## ward dendrogram
dend = hclust(d = d, method = 'ward.D2')
# Chunk 13
## view the dendrogram
plot(dend)
# Chunk 14
## Specify a range of cluster numbers
krange = 3:10
# goodness of variance fit
gvf = sapply(krange, function(k){
kclust = cutree(dend, k)
fastClusterGVF(dat = clust_dat, clust = kclust)
})
# average silhouette width
sil = sapply(krange, function(k){
kclust = cutree(dend, k)
mean(silhouette(x = kclust, dist = d)[,3])
})
# Chunk 15
## output diagnostics
cl_diag = cbind(k = krange, gvf = gvf, sil = sil)
par(mfrow=c(1,2))
plot(gvf ~ k, data = cl_diag, type='l', main = 'Goodness of Variance Fit')
plot(sil ~ k, data = cl_diag, type='l', main = 'Average Silhouette Width')
# Chunk 16
kable(round(data.frame(cl_diag), 2))
# Chunk 17
## cut dendrogram at best k and assign it to our sf object
best_k = 7
den_map['cluster'] = factor(cutree(dend, best_k))
## plot the map
plot(den_map['cluster'],main = paste('Denver Tracts 2012: k =',best_k,'clusters'))
# Chunk 18
## re-plot map
plot(den_map['cluster'],main = paste('Denver Tracts 2012: k =',best_k,'clusters'))
# Chunk 19
## assign cluster labels to full data
den@data$cluster = factor(cutree(dend, best_k))
## sort clusters by median of outcome variable, highest to lowest
health_uninsured_by_cluster = with(den@data, aggregate(Hlth_Un ~ cluster, FUN = 'median'))
health_uninsured_by_cluster = health_uninsured_by_cluster[order(health_uninsured_by_cluster$Hlth_Un, decreasing = T),]
den$cluster = factor(den$cluster, levels = health_uninsured_by_cluster$cluster)
## plot outcome variable
cols = brewer.pal(best_k, 'Set2')[as.numeric(levels(den$cluster))]
with(den@data, plot(Hlth_Un ~ cluster, col = cols, main = 'Percent of Population without Health Insurance by Cluster', ylab = 'Percent Uninsured'))
abline(h = median(den$Hlth_Un), col = 'red')
# Chunk 20
## generate average profile of a cluster
den_cent = colMeans(clust_dat) # the data centroid
cl = levels(den$cluster)[1] # our target cluster
cl_cent = colMeans(clust_dat[den$cluster==cl,]) # the cluster centroid
avp = (cl_cent - den_cent) / den_cent # difference from data mean
## format the data for plotting
avp_melt = melt(avp)
var_order = rownames(avp_melt)[order(avp_melt$value, decreasing = T)] # plot vars greatest to smallest
avp_melt$variable = factor(rownames(avp_melt), levels = var_order)
cl_col = cols[which(levels(den$cluster) == cl)] # for coloring barplot
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
ggtitle(paste('Average Profile for Cluster',cl))
denx <- den@data[,c('GEOID', 'Nghbrhd')]
denx <- split(denx, denx$Nghbrhd)
for(i in 1:length(denx)){
if(nrow(denx[[i]]) > 1){
denx[[i]]$Nghbrhd <- paste(denx[[i]]$Nghbrhd, toupper(letters[1:nrow(denx[[i]])]))
}
}
denx <- do.call(rbind, denx)
den$Nghbrhd <- denx$Nghbrhd[match(den$GEOID, denx$GEOID)]
library(RColorBrewer)
library(smacof)
sm <- smacofSym(d)
clust <- cutree(dend, 7)
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = brewer.pal(8, 'Set2')[clust])
dev.off()
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = brewer.pal(8, 'Set2')[clust])
set.seed(808)
clust.sm <- kmeans(sm$conf, centers = 7)$cluster
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = brewer.pal(8, 'Set2')[clust.sm])
den_map['clust.sm'] <- factor(clust.sm)
plot(den_map['clust.sm'], lwd = 0.1)
set.seed(808)
clust.sm <- kmeans(sm$conf, centers = 7)$cluster
text(sm$conf,
plot(sm$conf, cex = 0),
labels = den$Nghbrhd,
cex = 0.5,
col = brewer.pal(8, 'Set2')[clust.sm])
den_map['clust.sm'] <- factor(clust.sm)
plot(den_map['clust.sm'], lwd = 0.1)
# Chunk 1: setup
library(rgdal)
library(sf)
library(cluster)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
library(knitr)
source('fastClusterGVF.R') # custom goodness of fit measure
## load example data - Denver census tracts in 2012
den = readOGR(getwd(), 'denver12', verbose = F)
den = den[den$GEOID!='08031980100',] # remove unpopulated tract
# Chunk 2
knitr::include_graphics('figs/singleton_spielman_ex.jpeg')
# Chunk 3
knitr::include_graphics('figs/ecoregions.png')
# Chunk 4
knitr::include_graphics('figs/02_transitions.png')
# Chunk 5
knitr::include_graphics('figs/03_processes.png')
# Chunk 6
## create data
set.seed(808)
a <- data.frame(rnorm(500, mean = 0.5, sd = 0.2) + 5,
rnorm(500) +5)
b <- data.frame(rnorm(500, mean = 0.2, sd = 0.3) + 1,
rnorm(500) +2)
c <- data.frame(rnorm(500, mean = 0.1, sd = 0.25) + 3,
rnorm(500) -3)
## draw groups
plot(a, xlim=c(-2, 9), ylim=c(-7,
9), pch=16, col=4,
xlab = 'Attribute A', ylab = 'Attribute B',
main = 'Clustering in a Perfect World')
points(b, col=2, pch=16)
points(c, col=3, pch=16)
# Chunk 7
knitr::include_graphics('figs/Kmeans_animation.gif')
# Chunk 8
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'Nghbrhd', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
## standardize (z-score) cluster inputs
clust_dat_z = scale(clust_dat)
## perform clustering
set.seed(909)
kmclust = kmeans(clust_dat_z, centers = 7)$cluster # perform k-means and extract group labels
# Chunk 9
## map the clusters in physical space
den_map = as(den,'sf')
den_map$kmeans_cluster = factor(kmclust)
plot(den_map['kmeans_cluster'],main = paste('Denver Tracts 2012: k-means with k=7 clusters'))
# Chunk 10
knitr::include_graphics('figs/dist_ex.png')
# Chunk 11
knitr::include_graphics('figs/WPGMA_Dendrogram_5S_data.svg')
# Chunk 12
## add neighborhood ids to rownames for readability
rownames(clust_dat_z) = den$Nghbrhd
## generate distance matrix
d = dist(clust_dat_z)
## ward dendrogram
dend = hclust(d = d, method = 'ward.D2')
# Chunk 13
## view the dendrogram
plot(dend)
# Chunk 14
## Specify a range of cluster numbers
krange = 3:10
# goodness of variance fit
gvf = sapply(krange, function(k){
kclust = cutree(dend, k)
fastClusterGVF(dat = clust_dat, clust = kclust)
})
# average silhouette width
sil = sapply(krange, function(k){
kclust = cutree(dend, k)
mean(silhouette(x = kclust, dist = d)[,3])
})
# Chunk 15
## output diagnostics
cl_diag = cbind(k = krange, gvf = gvf, sil = sil)
par(mfrow=c(1,2))
plot(gvf ~ k, data = cl_diag, type='l', main = 'Goodness of Variance Fit')
plot(sil ~ k, data = cl_diag, type='l', main = 'Average Silhouette Width')
# Chunk 16
kable(round(data.frame(cl_diag), 2))
# Chunk 17
## cut dendrogram at best k and assign it to our sf object
best_k = 7
den_map['cluster'] = factor(cutree(dend, best_k))
## plot the map
plot(den_map['cluster'],main = paste('Denver Tracts 2012: k =',best_k,'clusters'))
# Chunk 18
## re-plot map
plot(den_map['cluster'],main = paste('Denver Tracts 2012: k =',best_k,'clusters'))
# Chunk 19
## assign cluster labels to full data
den@data$cluster = factor(cutree(dend, best_k))
## sort clusters by median of outcome variable, highest to lowest
health_uninsured_by_cluster = with(den@data, aggregate(Hlth_Un ~ cluster, FUN = 'median'))
health_uninsured_by_cluster = health_uninsured_by_cluster[order(health_uninsured_by_cluster$Hlth_Un, decreasing = T),]
den$cluster = factor(den$cluster, levels = health_uninsured_by_cluster$cluster)
## plot outcome variable
cols = brewer.pal(best_k, 'Set2')[as.numeric(levels(den$cluster))]
with(den@data, plot(Hlth_Un ~ cluster, col = cols, main = 'Percent of Population without Health Insurance by Cluster', ylab = 'Percent Uninsured'))
abline(h = median(den$Hlth_Un), col = 'red')
# Chunk 20
## generate average profile of a cluster
den_cent = colMeans(clust_dat) # the data centroid
cl = levels(den$cluster)[1] # our target cluster
cl_cent = colMeans(clust_dat[den$cluster==cl,]) # the cluster centroid
avp = (cl_cent - den_cent) / den_cent # difference from data mean
## format the data for plotting
avp_melt = melt(avp)
var_order = rownames(avp_melt)[order(avp_melt$value, decreasing = T)] # plot vars greatest to smallest
avp_melt$variable = factor(rownames(avp_melt), levels = var_order)
cl_col = cols[which(levels(den$cluster) == cl)] # for coloring barplot
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
ggtitle(paste('Average Profile for Cluster',cl))
