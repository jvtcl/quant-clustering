nbh_lookup = read.csv('source/den_acs14_5yr_trt_in_nbh.csv',stringsAsFactors = F)[,-1]
nbh_lookup$GEOID = paste0('0', nbh_lookup$GEOID)
nbh_lookup=nbh_lookup[match(trt@data$GEOID,nbh_lookup$GEOID),]
trt@data = join(nbh_lookup, trt@data)
names(trt@data)[2] = 'Neighborhood'
## assign unique neighborhood IDs
trtx <- trt@data[,c('GEOID', 'Neighborhood')]
trtx <- split(trtx, trtx$Neighborhood)
for(i in 1:length(trtx)){
if(nrow(trtx[[i]]) > 1){
trtx[[i]]$Neighborhood <- paste(trtx[[i]]$Neighborhood,
toupper(letters[1:nrow(trtx[[i]])]))
}
}
trtx <- do.call(rbind, trtx)
trt <- data.frame(id.nbh = trtx$Neighborhood[match(trt$GEOID, trtx$GEOID)],
trt@data,
stringsAsFactors = F)
## write outputs
writeOGR(trt,dsn=getwd(),layer='denver12',driver='ESRI Shapefile',overwrite_layer = T, )
rm(list = ls())
load('source/den_data_FINAL.RData')
# name fixes
names(den_age)[names(den_age)=='Age.35.65']='Age.35.64'
names(den_race)[-1]=paste0('r',names(den_race)[-1])
names(den_hage)[-1]=paste0('HS.',names(den_hage)[-1])
names(den_hage)=gsub('HS.HS.','HS.',names(den_hage)) # fix redundant labels
names(den_pov)[2]='Below_Poverty'
den_pov$Above_Poverty=rowSums(den_pov[,3:4])
names(den_ivd)[2]='Res_Value'
# assemble data
dat=den_age
dat=merge(dat,den_race,by='FIPS')
dat=merge(dat,den_pov[,c('FIPS','Below_Poverty','Above_Poverty')],by='FIPS')
dat=merge(dat,den_tnr,by='FIPS')
dat=merge(dat,den_noauto,by.x='FIPS',by.y='Geo_GEOID')
dat=merge(dat,den_hcov,by='FIPS')
dat=merge(dat,den_hunits,by='FIPS')
dat=merge(dat,den_hage,by='FIPS')
dat=merge(dat,den_ivd,by.x='FIPS',by.y='GEOID')
dat=merge(dat,den_bdg,by.x='FIPS',by.y='GEOID')
dat=merge(dat,den_imp,by.x='FIPS',by.y='GEOID')
dat=merge(dat,den_cpy,by.x='FIPS',by.y='GEOID')
names(dat)[1]='GEOID'
# join data to tracts and write output
library(rgdal)
library(plyr)
trt=readOGR('source','den_tracts')
trt@data=trt@data[,c('GEOID','INTPTLAT','INTPTLON')]
trt@data[,2]=as.numeric(as.character(trt@data[,2]))
trt@data[,3]=as.numeric(as.character(trt@data[,3]))
trt@data=join(trt@data,dat)
# add neighborhood ids
nbh_lookup = read.csv('source/den_acs14_5yr_trt_in_nbh.csv',stringsAsFactors = F)[,-1]
nbh_lookup$GEOID = paste0('0', nbh_lookup$GEOID)
nbh_lookup=nbh_lookup[match(trt@data$GEOID,nbh_lookup$GEOID),]
trt@data = join(nbh_lookup, trt@data)
names(trt@data)[2] = 'Neighborhood'
## assign unique neighborhood IDs
trtx <- trt@data[,c('GEOID', 'Neighborhood')]
trtx <- split(trtx, trtx$Neighborhood)
for(i in 1:length(trtx)){
if(nrow(trtx[[i]]) > 1){
trtx[[i]]$Neighborhood <- paste(trtx[[i]]$Neighborhood,
toupper(letters[1:nrow(trtx[[i]])]))
}
}
trtx <- do.call(rbind, trtx)
trt@data <- data.frame(id.nbh = trtx$Neighborhood[match(trt$GEOID, trtx$GEOID)],
trt@data,
stringsAsFactors = F)
## write outputs
writeOGR(trt,dsn=getwd(),layer='denver12',driver='ESRI Shapefile',overwrite_layer = T, )
head(trt@data)
## write outputs
# writeOGR(trt,dsn=getwd(),layer='denver12',driver='ESRI Shapefile',overwrite_layer = T)
writeOGR(trt,dsn=getwd(),layer='denver12',driver='GeoJSON',overwrite_layer = T)
## write outputs
# writeOGR(trt,dsn=getwd(),layer='denver12',driver='ESRI Shapefile',overwrite_layer = T)
writeOGR(trt,dsn=getwd(),layer='denver12',driver='geojson',overwrite_layer = T)
## write outputs
# writeOGR(trt,dsn=getwd(),layer='denver12',driver='ESRI Shapefile',overwrite_layer = T)
writeOGR(trt,dsn=getwd(),layer='denver12',driver='json',overwrite_layer = T)
?writeOGR
## write outputs
# writeOGR(trt,dsn=getwd(),layer='denver12',driver='ESRI Shapefile',overwrite_layer = T)
writeOGR(trt,dsn=getwd(),layer='denver12',driver='GeoJSON',overwrite_layer = T)
## write outputs
# writeOGR(trt,dsn=getwd(),layer='denver12',driver='ESRI Shapefile',overwrite_layer = T)
writeOGR(trt,dsn=getwd(),layer='denver12',driver='GeoJSON')
## write outputs
# writeOGR(trt,dsn=getwd(),layer='denver12',driver='ESRI Shapefile',overwrite_layer = T)
writeOGR(trt,dsn=getwd(),layer='denver12.GeoJSON',driver='GeoJSON',overwrite_layer = T)
"GeoJSON" %in% ogrDrivers()$name
trt_sf <- as(trt, 'sf')
library(sf)
trt_sf <- as(trt, 'sf')
write_sf(trt_sf, dsn=getwd(),layer='denver12',driver='GeoJSON',overwrite_layer = T)
write_sf(trt_sf, dsn=getwd(),layer='denver12',driver='GeoJSON')
?rwite_sf
?write_sf
write_sf(trt_sf, dsn=getwd(),layer='denver12.GeoJSON',driver='GeoJSON')
write_sf(trt_sf, dsn=getwd(),layer='denver12',driver='GeoJSON', update = T)
write_sf(trt_sf, dsn=getwd(),layer='denver12',driver='GeoJSON', overwrite = T)
rm(list = ls())
library(rgdal)
library(sf)
library(cluster)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
library(knitr)
library(FactoMineR)
library(cowplot)
source('fastClusterGVF.R') # custom goodness of fit measure
## load example data - Denver census tracts in 2012
den = readOGR(getwd(), 'denver12', verbose = F)
den = den[den$GEOID!='08031980100',] # remove unpopulated tract
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'Nghbrhd', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
## standardize (z-score) cluster inputs
clust_dat_z = scale(clust_dat)
## perform k-means clustering and extract group labels
set.seed(909)
kmclust = kmeans(clust_dat_z, centers = 7)$cluster
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'Nghbrhd', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
head(clust_dat)
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'id_nbh', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
## standardize (z-score) cluster inputs
clust_dat_z = scale(clust_dat)
## perform k-means clustering and extract group labels
set.seed(909)
kmclust = kmeans(clust_dat_z, centers = 7)$cluster
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'id_nbh', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
## standardize (z-score) cluster inputs
clust_dat_z = scale(clust_dat)
head(clust_dat)
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'Nghbrhd', 'id_nbh', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
## standardize (z-score) cluster inputs
clust_dat_z = scale(clust_dat)
## perform k-means clustering and extract group labels
set.seed(909)
kmclust = kmeans(clust_dat_z, centers = 7)$cluster
## map the clusters in physical space
den_map = as(den,'sf')
den_map$kmeans_cluster = factor(kmclust)
plot(den_map['kmeans_cluster'],main = paste('Denver Tracts 2012: k-means with k=7 clusters'))
## add neighborhood ids to rownames for readability
rownames(clust_dat_z) = den$id_nbh
## generate distance matrix
d = dist(clust_dat_z)
## ward dendrogram
dend = hclust(d = d, method = 'ward.D2')
## view the dendrogram
plot(dend)
a
b
## create data
set.seed(808)
a <- data.frame(rnorm(500, mean = 0.5, sd = 0.2) + 5,
rnorm(500) +5)
b <- data.frame(rnorm(500, mean = 0.2, sd = 0.3) + 1,
rnorm(500) +2)
c <- data.frame(rnorm(500, mean = 0.1, sd = 0.25) + 3,
rnorm(500) -3)
## draw groups
plot(a, xlim=c(-2, 9), ylim=c(-7,
9), pch=16, col=4,
xlab = 'Attribute A', ylab = 'Attribute B',
main = 'Clustering in a Perfect World')
points(b, col=2, pch=16)
points(c, col=3, pch=16)
a
b
c
blah <- rbind(a, b, c)
head(a)
head(b)
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
ggtitle(paste('Average Profile for Cluster',cl))
## generate average profile of a cluster
den_cent = colMeans(clust_dat) # the data centroid
cl = levels(den$cluster)[1] # our target cluster
cl_cent = colMeans(clust_dat[den$cluster==cl,]) # the cluster centroid
avp = (cl_cent - den_cent) / den_cent # difference from data mean
avp = avp[avp > 0] # limit to variables above the Denver mean
## format the data for plotting
avp_melt = melt(avp)
var_order = rownames(avp_melt)[order(avp_melt$value, decreasing = T)] # plot vars greatest to smallest
avp_melt$variable = factor(rownames(avp_melt), levels = var_order)
cl_col = cols[which(levels(den$cluster) == cl)] # for coloring barplot
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
ggtitle(paste('Average Profile for Cluster',cl))
rm(list = ls())
# Chunk 1: setup
library(rgdal)
library(sf)
library(cluster)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
library(knitr)
library(FactoMineR)
library(cowplot)
source('fastClusterGVF.R') # custom goodness of fit measure
## load example data - Denver census tracts in 2012
den = readOGR(getwd(), 'denver12', verbose = F)
den = den[den$GEOID!='08031980100',] # remove unpopulated tract
# Chunk 2
knitr::include_graphics('figs/singleton_spielman_ex.jpeg')
# Chunk 3
knitr::include_graphics('figs/ecoregions.png')
# Chunk 4
knitr::include_graphics('figs/02_transitions.png')
# Chunk 5
knitr::include_graphics('figs/03_processes.png')
# Chunk 6
## create data
set.seed(808)
a <- data.frame(rnorm(500, mean = 0.5, sd = 0.2) + 5,
rnorm(500) +5)
b <- data.frame(rnorm(500, mean = 0.2, sd = 0.3) + 1,
rnorm(500) +2)
c <- data.frame(rnorm(500, mean = 0.1, sd = 0.25) + 3,
rnorm(500) -3)
## draw groups
plot(a, xlim=c(-2, 9), ylim=c(-7,
9), pch=16, col=4,
xlab = 'Attribute A', ylab = 'Attribute B',
main = 'Clustering in a Perfect World')
points(b, col=2, pch=16)
points(c, col=3, pch=16)
# Chunk 7
knitr::include_graphics('figs/Kmeans_animation.gif')
# Chunk 8
## remove geographic identifiers, x/y coords,
## and test variable (health insurance coverage) from cluster inputs
clust_vars = names(den)[!names(den) %in% c('GEOID', 'Nghbrhd', 'id_nbh', 'INTPTLA', 'INTPTLO', 'Hlth_Un', 'Hlth_In')]
## generate clustering input dataframe
clust_dat = den@data[,clust_vars]
## standardize (z-score) cluster inputs
clust_dat_z = scale(clust_dat)
## perform k-means clustering and extract group labels
set.seed(909)
kmclust = kmeans(clust_dat_z, centers = 7)$cluster
# Chunk 9
## map the clusters in physical space
den_map = as(den,'sf')
den_map$kmeans_cluster = factor(kmclust)
plot(den_map['kmeans_cluster'],main = paste('Denver Tracts 2012: k-means with k=7 clusters'))
# Chunk 10
knitr::include_graphics('figs/dist_ex.png')
# Chunk 11
knitr::include_graphics('figs/dist_ex.png')
# Chunk 12
knitr::include_graphics('figs/WPGMA_Dendrogram_5S_data.svg')
# Chunk 13
knitr::include_graphics('figs/WPGMA_Dendrogram_5S_data.svg')
# Chunk 14
## add neighborhood ids to rownames for readability
rownames(clust_dat_z) = den$id_nbh
## generate distance matrix
d = dist(clust_dat_z)
## ward dendrogram
dend = hclust(d = d, method = 'ward.D2')
# Chunk 15
## view the dendrogram
plot(dend)
# Chunk 16
## Specify a range of cluster numbers
krange = 3:10
# goodness of variance fit
gvf = sapply(krange, function(k){
kclust = cutree(dend, k)
fastClusterGVF(dat = clust_dat, clust = kclust)
})
# average silhouette width
sil = sapply(krange, function(k){
kclust = cutree(dend, k)
mean(silhouette(x = kclust, dist = d)[,3])
})
# Chunk 17
## output diagnostics
cl_diag = cbind(k = krange, gvf = gvf, sil = sil)
par(mfrow=c(1,2))
plot(gvf ~ k, data = cl_diag, type='l', main = 'Goodness of Variance Fit')
plot(sil ~ k, data = cl_diag, type='l', main = 'Average Silhouette Width')
# Chunk 18
kable(round(data.frame(cl_diag), 2))
# Chunk 19
## cut dendrogram at best k
best_k = 7
## assign it to the map data
den_map['cluster'] = factor(cutree(dend, best_k))
# Chunk 20
## plot the map
plot(den_map['cluster'],main = paste('Denver Tracts 2012: k =',best_k,'clusters'))
# Chunk 21
## re-plot map
plot(den_map['cluster'],main = paste('Denver Tracts 2012: k =',best_k,'clusters'))
# Chunk 22
## assign cluster labels to full data
den@data$cluster = factor(cutree(dend, best_k))
## sort clusters by median of outcome variable, highest to lowest
health_uninsured_by_cluster = with(den@data, aggregate(Hlth_Un ~ cluster, FUN = 'median'))
health_uninsured_by_cluster = health_uninsured_by_cluster[order(health_uninsured_by_cluster$Hlth_Un, decreasing = T),]
den$cluster = factor(den$cluster, levels = health_uninsured_by_cluster$cluster)
## plot outcome variable
cols = brewer.pal(best_k, 'Set2')[as.numeric(levels(den$cluster))]
with(den@data, plot(Hlth_Un ~ cluster, col = cols, main = 'Percent of Population without Health Insurance by Cluster', ylab = 'Percent Uninsured'))
abline(h = median(den$Hlth_Un), col = 'red')
# Chunk 23
## generate average profile of a cluster
den_cent = colMeans(clust_dat) # the data centroid
cl = levels(den$cluster)[1] # our target cluster
cl_cent = colMeans(clust_dat[den$cluster==cl,]) # the cluster centroid
avp = (cl_cent - den_cent) / den_cent # difference from data mean
avp = avp[avp > 0] # limit to variables above the Denver mean
## format the data for plotting
avp_melt = melt(avp)
var_order = rownames(avp_melt)[order(avp_melt$value, decreasing = T)] # plot vars greatest to smallest
avp_melt$variable = factor(rownames(avp_melt), levels = var_order)
cl_col = cols[which(levels(den$cluster) == cl)] # for coloring barplot
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
ggtitle(paste('Average Profile for Cluster',cl))
# Chunk 24
## build the PCA inputs
pca_in <- den@data[,c('Hlth_Un', clust_vars)] # we will impose the 'no health insurance' variable in the PCA space
# rownames(pca_in) <- den$Nghbrhd # assign neighborhood IDs
# perform PCA (z-scoring handled internally)
# for simplicity's sake, only keep the first 2 components
pca <- PCA(pca_in, scale.unit = T, quanti.sup = 1,  ncp = 2, graph = F)
## plot PCA loadings
plot(pca, choix = 'var', shadowtext = T, cex = 2)
# Chunk 25
## extract PCA scores (projections of each case)
pca.scores <- pca$ind$coord %>%
scale %>%
data.frame
## cluster using Ward's method
clust_pca <- pca.scores %>%
dist %>%
hclust(method = 'ward.D2') %>%
cutree(k = 7) %>%
factor # for plotting
# Chunk 26
## assign clusters to map data
den_map['clust_pca'] <- factor(clust_pca)
## make plots
plt_pca <- plot(pca, choix = 'var', shadowtext = T, cex = 0.8) +
geom_point(data = pca.scores[-100,], aes(x = Dim.1, y = Dim.2, color = clust_pca[-100]), size = 5, alpha = 0.4, inherit.aes = F) + # omit Obs 100/Sun Valley (outlier)
scale_color_brewer(type = 'qual', palette = 'Set2') +
labs(color = 'Cluster')
map_pca <- ggplot(data = den_map, aes(fill = clust_pca)) +
geom_sf(size = 0.1, color = 'black') +
scale_fill_brewer(type = 'qual', palette = 'Set2') +
theme_void() +
theme(legend.position = 'none')
# Chunk 27
## display plots
plot_grid(map_pca, plt_pca, nrow = 1)
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
ggtitle(paste('Average Profile for Cluster',cl))
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1, size = 4)) +
ggtitle(paste('Average Profile for Cluster',cl))
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1, size = 10)) +
ggtitle(paste('Average Profile for Cluster',cl))
ggplot(avp_melt, aes(x = variable, y = value)) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1, size = 12)) +
ggtitle(paste('Average Profile for Cluster',cl))
ggplot(avp_melt, aes(x = variable, y = round(100 * value))) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
xlab = c('Variable') +
ylab = c('Percent above Denver Mean')
ggplot(avp_melt, aes(x = variable, y = round(100 * value))) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
xlab = c('Variable') +
ylab = c('Percent above Denver Mean')
ggplot(avp_melt, aes(x = variable, y = round(100 * value))) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
xlab = c('Variable') +
ylab = c('Percent above Denver Mean') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1, size = 12)) +
ggtitle(paste('Average Profile for Cluster',cl))
ggplot(avp_melt, aes(x = variable, y = round(100 * value))) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
xlab = c('Variable') +
ylab = c('Percent above Denver Mean')
ggplot(avp_melt, aes(x = variable, y = round(100 * value))) +
geom_bar(fill = cl_col, color = 'black', stat = 'identity') +
xlab('Variable') +
ylab ('Percent above Denver Mean') +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1, size = 12)) +
ggtitle(paste('Average Profile for Cluster',cl))
write.csv(data.frame(Code = names), 'Denver_Variables.csv')
names(den)
write.csv(data.frame(Code = names(den)[-c(1:5)]), 'Denver_Variables.csv')
clust_vars
head(den_hage)
load('source/den_data_FINAL.RData')
head(den_hage)
summary(den$Res_Val)
View(read.csv('Denver_Variables.csv'))
# run this chunk to display the variable descriptions!
View(read.csv('Denver_Variables.csv'))
?plot.pca
?plot.PCA
plot(pca, choix = 'var') +
geom_point(data = data.frame(pca$ind$coord)[-100,1:2], # omit Obs 100/Sun Valley (outlier)
aes(x = Dim.1,
y = Dim.2),
color = 'gray80',
size = 5)
plot(pca, choix = 'var') +
geom_point(data = data.frame(pca$ind$coord)[-100,1:2], # omit Obs 100/Sun Valley (outlier)
aes(x = Dim.1,
y = Dim.2),
color = 'gray80',
size = 5,
alpha = 0.4)
plot(pca)
plot(pca, choix = 'ind')
plot_grid(
plot(pca, choix = 'var', cex = 2),
plot(pca, choix = 'ind'),
nrow = 1
)
plot_grid(
plot(pca, choix = 'var'),
plot(pca, choix = 'ind'),
nrow = 1
)
plot_grid(
plot(pca, choix = 'var'),
plot(pca, choix = 'ind', labels = den$id_nbh),
nrow = 1
)
## build the PCA inputs
pca_in <- den@data[,c('Hlth_Un', clust_vars)] # we will impose the 'no health insurance' variable in the PCA space
rownames(pca_in) <- den$id_nbh # assign neighborhood IDs
# perform PCA (z-scoring handled internally)
# for simplicity's sake, only keep the first 2 components
pca <- PCA(pca_in, scale.unit = T, quanti.sup = 1,  ncp = 2, graph = F)
## plot PCA loadings
plot(pca, choix = 'var', cex = 2)
plot_grid(
plot(pca, choix = 'var'),
plot(pca, choix = 'ind', labels = den$id_nbh),
nrow = 1
)
plot_grid(
plot(pca, choix = 'var'),
plot(pca, choix = 'ind', labels = den$id_nbh, cex = 0.5),
nrow = 1
)
vegan::rda(clust_dat_z~., data = data.frame(clust_pca))
vegan::rda(clust_dat_z~., data = data.frame(clust_pca)) %>% Rsquared
vegan::rda(clust_dat_z~., data = data.frame(clust_pca)) %>% RsquareAdj
vegan::rda(clust_dat_z~., data = data.frame(clust_pca))
rda(clust_dat_z~., data = data.frame(clust_pca))
library(vegan)
rda(clust_dat_z~., data = data.frame(clust_pca))
rda(clust_dat_z~., data = data.frame(clust_pca)) %>% RsquareAdj
rda(clust_dat_z~., data = data.frame(den$cluster)) %>% RsquareAdj
rda(clust_dat_z~., data = data.frame(den_map$cluster)) %>% RsquareAdj
rda(clust_dat_z~., data = data.frame(den_map$cluster), scale = F) %>% RsquareAdj
plot(pca, choix = 'ind', labels = den$id_nbh, select = -100)
# run this chunk to display the variable descriptions
View(read.csv('Denver_Variables.csv'))
# run this chunk to display the variable descriptions
View(read.csv('variables.csv'))
